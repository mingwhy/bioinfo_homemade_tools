# RCFGL, C/Python implementation of Rapid Conditiona adaptive Fused Graphical Lasso (RCFGL)
https://github.com/sealx017/RCFGL

## create a virtual for RCFGL python package
conda info --env

conda create -n RCFGL
conda info --env

conda activate RCFGL
conda deactivate 

### version check
$python --version
Python 3.9.10
$pip --version
pip 22.0.3 from /Users/mingyang/anaconda3/envs/RCFGL/lib/python3.9/site-packages/pip (python 3.9)

## install requried python packages according to github docs

check igl, install using: "conda install -c conda-forge igl" (https://libigl.github.io/libigl-python-bindings/)
check pywt, install using: "conda install pywavelets" (https://pywavelets.readthedocs.io/en/latest/)
check matplotlib, install using: "conda install -c conda-forge matplotlib" (https://matplotlib.org/)
check networkx, install using: "conda install -c conda-forge networkx" (https://networkx.org/)
not work ~cppyy, install using: "python -m pip install cppyy" (https://cppyy.readthedocs.io/en/latest/)~
I use: conda install -c conda-forge cppyy

not work ~prox_tv, install using: "pip install prox_tv" (https://pypi.org/project/prox_tv/)~
I need to install Blas and Lapack in terminal before pip install this one.
'Blas and Lapack' installation, refer to 'Blas_and_Lapack.txt'
after brew install the above two, rerun: pip install prox_tv

in addition,
$ pip install -U scikit-learn

## jupyter tutorial 
https://bit.ly/3IFkdon
download RCFGL to local laptop: /Users/mingyang/Downloads/RCFGL-main
use 'ipython' to enter python 

## setup
import pandas as pd
import sys
import os
from sklearn.preprocessing import StandardScaler

os.getcwd() #'/Users/mingyang'

RCFGL_path = '/Users/mingyang/Downloads/RCFGL-main'
os.chdir(RCFGL_path)
sys.path.insert(0, 'Python_functions')
from RCFGL import RFGL, RCFGL
os.chdir(RCFGL_path)
from Dstream_functions import*

## read in data
B = pd.read_csv('Data/Data_1.csv')
H = pd.read_csv('Data/Data_2.csv')
M = pd.read_csv('Data/Data_3.csv')

type(B) # pandas.core.frame.DataFrame
B.shape # (100, 500) [100 rows x 500 columns], number of genes (p=500) and the same number of samples (n=100).

# Scaling the dataframes such that the columns have 0 mean
scalerB = StandardScaler(with_std=False); scalerB.fit(B)
B = scalerB.transform(B)

scalerH = StandardScaler(with_std=False);  scalerH.fit(H)
H = scalerH.transform(H)

scalerM = StandardScaler(with_std=False); scalerM.fit(M)
M = scalerM.transform(M)

type(B) #numpy.ndarray

# Combined list of the scaled dataframes
A = []; A.append(B); A.append(H); A.append(M);

RFGL_output = RFGL(lambda1 = 0.1, lambda2 = 0.1, A = A, ADMMmaxiter = 100, admmtol = 0.001)
RCFGL_output = RCFGL(lambda1 = 0.1, lambda2 = 0.1, A = A, ADMMmaxiter = 100, admmtol = 0.001)

#Extracting the results
Adjacency_all = MakeAdjMatrix_all(RCFGL_output, truncation_value = 0.05, top_N = 75, names = 'default')

NetworkPlotter(Adjacency_all, which = 3)
PairNetworkPlotter(Adjacency_all, pair = [1, 3])
PairNetworkPlotter(Adjacency_all, pair = [2, 3])
AllNetworkPlotter(Adjacency_all)

#Comparison of the conditions in terms of the proportion of common edges
Adj_all_new = MakeAdjMatrix_all(RCFGL_output, truncation_value = 0.005, top_N = 'all')
SummaryTable(Adj_all_new)

#We notice that out of 485 edges detected in the condition 1, 99.6% also appear in the condition 2. Similarly, out of 492 edges detected in the condition 3, 82.3% appear both in the conditions 1 and 2.

####################################################
## benchmark RCFGL in handling 4k genes

# inside R
> sapply(theta.star.npn,dim); #122 or 185 cells, 4606 genes
     young  old
[1,]   122  185
[2,]  4606 4606

# center in R instead of in python (may be not necessary, check time cost of 'centering' in R later)
> x1=theta.star.npn[[1]]
> x1=apply(x1,2,function(i) scale(i,center=T,scale=F))
> x2=theta.star.npn[[2]]
> x2=apply(x2,2,function(i) scale(i,center=T,scale=F))

> data.table::fwrite(x1,'~/Downloads/young.csv')
x being coerced from class: matrix to data.table
> data.table::fwrite(x2,'~/Downloads/old.csv')
x being coerced from class: matrix to data.table


# inside python
from datetime import datetime
B = pd.read_csv('~/Downloads/MG_young.csv')
H = pd.read_csv('~/Downloads/MG_old.csv')
#B= B.to_numpy();H= H.to_numpy()

# Scaling the dataframes such that the columns have 0 mean, 1s
start = datetime.now()
scalerB = StandardScaler(with_std=False); scalerB.fit(B)
B = scalerB.transform(B)
scalerH = StandardScaler(with_std=False);  scalerH.fit(H)
H = scalerH.transform(H)
end = datetime.now()

# Combined list of the scaled dataframes
type(B) # numpy.ndarray
A = []; A.append(B); A.append(H); 


start = datetime.now()
RFGL_output = RFGL(lambda1 = 0.1, lambda2 = 0.1, A = A, ADMMmaxiter = 100, admmtol = 0.001)
#RCFGL_output = RCFGL(lambda1 = 0.1, lambda2 = 0.1, A = A, ADMMmaxiter = 100, admmtol = 0.001)
end=datetime.now()

#input: (122, 4606), (185, 4606), 40min
#input: (1656, 4606), (2254, 4606), 40min
type(RFGL_output) #list
len(RFGL_output) #3ï¼Œ 0 big matrix, 1 one number, 2 one number
RFGL_output[0].shape #(4606, 4606, 2)
RFGL_output[0][0]
RFGL_output[0][1]

Adj_all_new = MakeAdjMatrix_all(RFGL_output, truncation_value = 0, top_N = 'all')
SummaryTable(Adj_all_new)

# save RFGL_output using pickle module (https://stackoverflow.com/questions/27745500/how-to-save-a-list-to-a-file-and-read-it-as-a-list-type)
import pickle
with open("test", "wb") as fp:
    pickle.dump(RFGL_output, fp)
with open("test", "rb") as fp:
    b = pickle.load(fp)
b

#https://github.com/sealx017/RCFGL/blob/main/Python_functions/RCFGL.py
list = []
list.append(final_theta)
list.append(AIC)
list.append(t1+t2) 
#list.append(logdet)
return list

