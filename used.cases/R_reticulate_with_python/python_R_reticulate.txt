## Problems with reticulate in R studio and importing python modules
https://stackoverflow.com/questions/65082487/problems-with-reticulate-in-r-studio-and-importing-python-modules
library("reticulate")
conda_create("my_project_env")
py_install(packages = c("numpy","pandas","scikit-learn","matplotlib","seaborn","statsmodels"))
conda_list()
use_condaenv("full_path_to_python_for my_project_env")
py_run_string('import numpy as np')
py_run_string('import pandas as pd')
py_run_string('import matplotlib.pyplot as plt')
py_run_string('import seaborn as sns')


## data type passing between R and python, integer, float, etc
reticulate does not work with R-Data frame and fit() function from Python (TypeError: 'float' object cannot be interpreted as an integer)
https://stackoverflow.com/questions/50272140/reticulate-does-not-work-with-r-data-frame-and-fit-function-from-python-typee
lof1 = sklearn.neighbors$LocalOutlierFactor(n_neighbors=as.integer(15))


## Loading a .rds file in Pandas
https://stackoverflow.com/questions/40996175/loading-a-rds-file-in-pandas
pip install pyreadr

Then you can read your rds file:
import pyreadr
result = pyreadr.read_r('/path/to/file.Rds') # also works for RData
# result is a dictionary where keys are the name of objects and the values python
# objects. In the case of Rds there is only one object with None as key
df = result[None] # extract the pandas data frame 

## Read compressed numpy files in R
https://www.kaggle.com/code/gpreda/read-compressed-numpy-files-in-r

library(reticulate)
np <- import("numpy")

#read train and test
npz_train_imgs <- np$load('../input/train-imgs.npz')
npz_test_imgs <- np$load('../input/test-imgs.npz')
npz_train_labels <- np$load('../input/train-labels.npz')

#extract the data from compressed numpy arrays
train_images = npz_train_imgs$f[["arr_0"]]
test_images = npz_test_imgs$f[["arr_0"]]
train_labels = npz_train_labels$f[["arr_0"]]

#check the shape of the matrices and vector
dim(train_images)
dim(test_images)
dim(train_labels)

#plot the labels
barplot(table(train_labels), col=rainbow(10, 0.5), main="n Digits in Train")



## https://stackoverflow.com/questions/54261906/reticulate-importerror-no-module-named-pandas-in-rstudio-version-1-2
library(reticulate)
#py_install("pandas") 
pd <- import("pandas")

## Unable to change Python path in reticulate
https://stackoverflow.com/questions/50145643/unable-to-change-python-path-in-reticulate/58743111#58743111

Sys.setenv(RETICULATE_PYTHON = "/usr/bin/python3")
library(reticulate)

library(reticulate)
library(tidyverse)
py_config()
conda_list()
# restart Rstudio to make following effecitve
Sys.setenv(RETICULATE_PYTHON = "/Users/mingyang/anaconda3/envs/RCFGL/bin/python")
library(reticulate)
py_config()


## Reading a pickle file (PANDAS Python Data Frame) in R
https://stackoverflow.com/questions/35121192/reading-a-pickle-file-pandas-python-data-frame-in-r

Reticulate was quite easy and super smooth as suggested by russellpierce in the comments.

install.packages('reticulate')
After which I created a Python script like this from examples given in their documentation.

Python file:

import pandas as pd

def read_pickle_file(file):
    pickle_data = pd.read_pickle(file)
    return pickle_data

And then my R file looked like:

require("reticulate")

source_python("pickle_reader.py")
pickle_data <- read_pickle_file("C:/tsa/dataset.pickle")
This gave me all my data in R stored earlier in pickle format.

You can also do this all in-line in R without leaving your R editor (provided your system python can reach pandas)... e.g.

library(reticulate)
pd <- import("pandas")
pickle_data <- pd$read_pickle("dataset.pickle")

