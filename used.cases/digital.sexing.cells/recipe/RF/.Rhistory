overlap.genes=gene.names[gene.names %in% gene.names.2019]
inp[,overlap.genes]<-t(dat.2015[overlap.genes,])
test=scale(inp);
dim(test) #sample by feature
test[is.nan(test)]=0
pred_2015 = predict(classifier, test)
pred_2015 #all correct
##########################################
## read in 2011 data
dat.2011=data.table::fread('../external_data/2011_paper_data/2011_log2.RPKM.txt')
dim(dat.2011) #12353    24
gene.names=dat.2011$gene.name
dat.2011=as.data.frame(dat.2011[,-1])
rownames(dat.2011)=gene.names
dim(dat.2011) #6003    6
dat.2011[1:3,1:3]
sum(gene.names %in% gene.names.2019) #8215
colnames(dat.2011)
grep('14',colnames(dat.2011))
dat.2011[,grep('14',colnames(dat.2011))]
dat.2011=dat.2011[,grep('14',colnames(dat.2011))] #limit to stage14
sum(gene.names %in% gene.names.2019) #8215
inp=(matrix(0,nrow=ncol(dat.2011),ncol=length(gene.names.2019)))
rownames(inp)=colnames(dat.2011)
colnames(inp)=gene.names.2019
overlap.genes=gene.names[gene.names %in% gene.names.2019]
inp[,overlap.genes]<-t(dat.2011[overlap.genes,])
test=scale(inp);
dim(test) #sample by feature
test[is.nan(test)]=0
pred_2011 = predict(classifier, test)
pred_2011 #all correct
table(substr(names(pred_2011),0,1),pred_2011)
##########################################
## read in 2011 data
dat.2011=data.table::fread('../external_data/2011_paper_data/2011_log2.RPKM.txt')
dim(dat.2011) #12353    24
gene.names=dat.2011$gene.name
dat.2011=as.data.frame(dat.2011[,-1])
rownames(dat.2011)=gene.names
dim(dat.2011) #6003    6
dat.2011[1:3,1:3]
dat.2011=dat.2011[,grep('13|14',colnames(dat.2011))] #limit to stage14
sum(gene.names %in% gene.names.2019) #8215
inp=(matrix(0,nrow=ncol(dat.2011),ncol=length(gene.names.2019)))
rownames(inp)=colnames(dat.2011)
colnames(inp)=gene.names.2019
overlap.genes=gene.names[gene.names %in% gene.names.2019]
inp[,overlap.genes]<-t(dat.2011[overlap.genes,])
test=scale(inp);
dim(test) #sample by feature
test[is.nan(test)]=0
pred_2011 = predict(classifier, test)
pred_2011 #all correct
table(substr(names(pred_2011),0,1),pred_2011)
########################################################################################
## read in 2011 data to subset genes
dat.2011=data.table::fread('../external_data/2011_paper_data/2011_log2.RPKM.txt')
dim(dat.2011) #12353    24
expr.mat=as.data.frame(dat.2011[,-1])
expr.mat[1:3,1:3]
gene.names=dat.2011[,1]
expr.mat=as.data.frame(dat.2011[,-1])
expr.mat[1:3,1:3]
head(gene.names)
rownames(expr.mat)=gene.names
dat.2011=data.table::fread('../external_data/2011_paper_data/2011_log2.RPKM.txt')
dim(dat.2011) #12353    24
gene.names=dat.2011[,1]
expr.mat=as.data.frame(dat.2011[,-1])
expr.mat[1:3,1:3]
rownames(expr.mat)=gene.names
rownames(expr.mat)
########################################################################################
## read in 2011 data to subset genes
dat.2011=data.table::fread('../external_data/2011_paper_data/2011_log2.RPKM.txt')
dim(dat.2011) #12353    24
gene.names=dat.2011[,1]
expr.mat=as.data.frame(dat.2011[,-1])
View(expr.mat)
View(expr.mat)
dim(gene.names)
gene.names
rownames(expr.mat)=gene.names[[1]]
expr.mat[1:3,1:3]
sample.meta=data.table::fread('../external_data/2011_paper_data/2011_sample.meta.txt')
head(sample.meta)
dim(sample.meta)
sample.meta$sex=substr(sample.meta$sample.id,0,1)
data = data.frame(t(expr.mat), y =sample.meta$sex)
head(data)
tail(colnames(data)) #last column is sex label
# create training and valida
library(e1071)
library(caTools)
gene.names=colnames(data)
length(unique(gene.names))# 8935
dim(data) # 49 8935
dataset=data
dim(dataset) #49 sample x 5 feature gene
#dataset=data[,-3] #remove roX2
colnames(dataset)
set.seed(321)
split = sample.split(dataset$y, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
(label.column=ncol(dataset)) #5nd column is the cluster label
# Feature Scaling for train and test separately
training_set[-label.column] = scale(training_set[-label.column])
test_set[-label.column] = scale(test_set[-label.column])
training_set$y=factor(training_set$y)
classifier = svm(formula = y ~ .,
data = training_set,
type = 'C-classification',
probability = TRUE,
kernel = 'linear')
training_set
training_set[1:3,1:3]
sum(is.na(training_set))
i=apply(expr.mat,1,var)
sum(i==0)
i=apply(expr.mat,1,sd)
sum(i==0)
head(i)
classifier=readRDS('svm_classifier_2019_train80samples.rds')
#https://stackoverflow.com/questions/34781495/how-to-find-important-factors-in-support-vector-machine
w<-t(classifier$coefs) %*% classifier$SV # weight vectors
w <- apply(w, 2, function(v){sqrt(sum(v^2))})  # weight
w <- sort(w, decreasing = T)
length(w) #8934
head(w)
library(org.Dm.eg.db)
dim(dataset) #49 x 5
top.genes=names(w)[1:10]
x=AnnotationDbi::select(org.Dm.eg.db,keys=top.genes,
keytype='FLYBASE',columns=c('SYMBOL'))
x$SYMBOL
gene.names.2019=names(w)
length(gene.names.2019) #8215
##########################################
## read in 2011 data
dat.2011=data.table::fread('../external_data/2011_paper_data/2011_log2.RPKM.txt')
dim(dat.2011) #12353    24
gene.names=dat.2011$gene.name
dat.2011=as.data.frame(dat.2011[,-1])
rownames(dat.2011)=gene.names
dim(dat.2011) #6003    6
dat.2011[1:3,1:3]
#dat.2011=dat.2011[,grep('13|14',colnames(dat.2011))] #limit to stage14
apply(dat.2011,2,function(i) sum(is.na(i)))
# remove M14D M14D_r2
ncol(dat.2011)
dat.2011=dat.2011[,1:22]
sum(gene.names %in% gene.names.2019) #8215
inp=(matrix(0,nrow=ncol(dat.2011),ncol=length(gene.names.2019)))
rownames(inp)=colnames(dat.2011)
colnames(inp)=gene.names.2019
overlap.genes=gene.names[gene.names %in% gene.names.2019]
inp[,overlap.genes]<-t(dat.2011[overlap.genes,])
test=scale(inp);
dim(test) #sample by feature
test[is.nan(test)]=0
pred_2011 = predict(classifier, test)
pred_2011 #all correct
table(substr(names(pred_2011),0,1),pred_2011)
length(pred_2011)
pred_2011
########################################################################################
## read in 2011 data to subset genes
dat.2011=data.table::fread('../external_data/2011_paper_data/2011_log2.RPKM.txt')
dim(dat.2011) #12353    24
gene.names=dat.2011[,1]
dat.2011=as.data.frame(dat.2011[,-1])
rownames(dat.2011)=gene.names
dim(dat.2011) #6003    6
dat.2011[1:3,1:3]
########################################################################################
## read in 2011 data to subset genes
dat.2011=data.table::fread('../external_data/2011_paper_data/2011_log2.RPKM.txt')
dim(dat.2011) #12353    24
gene.names=dat.2011[,1]
dat.2011=as.data.frame(dat.2011[,-1])
rownames(dat.2011)=gene.names
gene.names=as.character(dat.2011[,1])
dat.2011=as.data.frame(dat.2011[,-1])
rownames(dat.2011)=gene.names
dim(dat.2011) #6003    6
########################################################################################
## read in 2011 data to subset genes
dat.2011=data.table::fread('../external_data/2011_paper_data/2011_log2.RPKM.txt')
dim(dat.2011) #12353    24
gene.names=dat.2011[,1]
dat.2011=as.data.frame(dat.2011[,-1])
rownames(dat.2011)=gene.names[[1]]
dim(dat.2011) #6003    6
dat.2011[1:3,1:3]
#dat.2011=dat.2011[,grep('13|14',colnames(dat.2011))] #limit to stage14
apply(dat.2011,2,function(i) sum(is.na(i)))
# remove M14D M14D_r2
ncol(dat.2011)
dat.2011=dat.2011[,1:22]
sample.meta=data.table::fread('../external_data/2011_paper_data/2011_sample.meta.txt')
head(sample.meta)
dim(sample.meta)
tail(sample.meta)
sample.meta=sample.meta[,sample.meta$sample.id %in% colnames(dat.2011)]
sample.meta$sex=substr(sample.meta$sample.id,0,1)
sample.meta
sample.meta=data.table::fread('../external_data/2011_paper_data/2011_sample.meta.txt')
head(sample.meta)
dim(sample.meta)
sample.meta=sample.meta[sample.meta$sample.id %in% colnames(dat.2011),]
sample.meta$sex=substr(sample.meta$sample.id,0,1)
sample.meta
expr.mat=dat.2011
data = data.frame(t(expr.mat), y =sample.meta$sex)
head(data)
tail(colnames(data)) #last column is sex label
# create training and valida
library(e1071)
library(caTools)
gene.names=colnames(data)
length(unique(gene.names))# 12004
dim(data) # 24 12004
dataset=data
dim(dataset) #24 12004
#dataset=data[,-3] #remove roX2
colnames(dataset)
# use all 2019 data to construct classifier Predicting the Test set results
if(F){
dim(dataset)
scaled.dataset= scale(dataset[-label.column])
scaled.dataset=as.data.frame(scaled.dataset)
scaled.dataset=cbind(scaled.dataset,dataset$y)
colnames(scaled.dataset)[label.column]='y'
scaled.dataset$y=as.factor(scaled.dataset$y)
classifier = svm(formula = y ~ .,
data = scaled.dataset,
type = 'C-classification',
kernel = 'linear')
y_pred = predict(classifier, newdata = scaled.dataset)
table(scaled.dataset[,label.column],y_pred)
classifier
#saveRDS(classifier,'svm_classifier_2019_all49samples.rds')
}
set.seed(321)
split = sample.split(dataset$y, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
(label.column=ncol(dataset)) #5nd column is the cluster label
# Feature Scaling for train and test separately
training_set[-label.column] = scale(training_set[-label.column])
test_set[-label.column] = scale(test_set[-label.column])
training_set$y=factor(training_set$y)
classifier = svm(formula = y ~ .,
data = training_set,
type = 'C-classification',
probability = TRUE,
kernel = 'linear')
install.packages("liquidSVM")
BiocManager::install('liquidSVM')
install.packages("liquidSVM", repos="http://pnp.mathematik.uni-stuttgart.de/isa/steinwart/software/R")
library(liquidSVM)
reg <- liquidData('reg-1d')
model <- svm(Y~., reg$train)
result <- test(model, reg$test)
errors(result)
plot(reg$train$X1, reg$train$Y, ylim=c(-.2,.8), ylab='Y', xlab='X1', axes=T, pch='.', cex=2.5)
curve(predict(model, x), add=T, col='red', lwd=2)
#Multi-Class Classification
banana <- liquidData('banana-mc')
banana
model <- svm(Y~., banana$train)
mycol <- c('red', 'blue', 'cyan', 'green')
plot(banana$train$X1, banana$train$X2, pch=20, col=mycol[banana$train$Y], ylab='', xlab='', axes=F, lwd=0.25)
x <- seq(-1,1,.01)
z <- matrix(predict(model,expand.grid(x,x)),length(x))
contour(x,x,z, add=T, levels=1:4, col=1, lwd=3)
errors(test(model, banana$test))
#https://rdrr.io/cran/liquidSVM/man/liquidSVM-package.html
set.seed(123)
## Multiclass classification
modelIris <- svm(Species ~ ., iris)
y <- predict(modelIris, iris)
head(y)
table(y)
## Multiclass classification
modelIris <- svm(Species ~ ., iris,probability=T)
y <- predict(modelIris, iris,probability=T)
y
str(y)
svm
## Multiclass classification
modelIris <- liquidSVM::svm(Species ~ ., iris,probability = TRUE,)
y <- predict(modelIris, iris,probability=TRUE)
table(y)
preds_probs=attr(y,'probabilities')
head(preds_probs)
y
predict
y <- liquidSVM::predictLearner.classif.liquidSVM(modelIris, iris,probability=TRUE)
modelIris$last_result
errros(modelIris$last_result)
erros(modelIris$last_result)
errors(modelIris$last_result)
modelIris$last_result
modelIris
modelIris$predict.prob
## Multiclass classification
modelIris <- liquidSVM::svm(Species ~ ., iris,predict.prob = T)
modelIris$last_result
modelIris
y <- predict(modelIris, iris,probability=TRUE)
table(y)
names(y)
head(y)
apply(y,1,function(x) names(which.max(x)))
pred=apply(y,1,function(x) names(which.max(x)))
table(pred)
table(pred,iris$Species)
## Multiclass classification
modelIris <- liquidSVM::mcSVM(Species ~ ., iris,predict.prob = T)
modelIris
y <- predict(modelIris, iris, probability=TRUE)
names(y)
head(y)
pred=apply(y,1,function(x) names(which.max(x)))
table(pred,iris$Species)
setwd("~/Documents/Jay_data/SVM")
modelIris$all_vars
modelIris$explanatory
modelIris$train_data
library(h2o)
library(rsample)      # data splitting
library(randomForest) # basic implementation
library(ranger)       # a faster implementation of randomForest
library(caret)        # an aggregator package for performing many machine learning models
library(h2o)
install.packages("h2o")
setwd("~/Documents/Jay_data/RF")
install.packages("h2o")
library(ggplot2)
library(Seurat)
library(gridExtra)
library(tidyverse)
library(rsample)      # data splitting
library(randomForest) # basic implementation
library(ranger)       # a faster implementation of randomForest
library(caret)        # an aggregator package for performing many machine learning models
library(h2o)          # an extremely fast java-based platform
########################################################
## read in gene chro info
df.gene.table=data.table::fread('../../single.cell_datasets/embryo_germline/gene.meta_embryo.txt',header=T,sep='\t')
head(df.gene.table)
df.gene.table=df.gene.table[df.gene.table$LOCATION_ARM %in% c('2R','3R','3L','4','2L','X'),]
table(df.gene.table$LOCATION_ARM)
df.gene.table=as.data.frame(df.gene.table)
#rownames(df.gene.table)=df.gene.table$current_symbol
rownames(df.gene.table)=df.gene.table$FBID_KEY
########################################################################################
## read in gene expression data and sample meta information
dat.both=readRDS('../../single.cell_sex.differences/embryo_sex.cells/integrated.sexed.samples_seurat.obj.rds')
grep("Sxl|msl-2",rownames(dat.both))
dim(dat.both) #12185 x 17142
sum(rownames(dat.both) %in% df.gene.table$submitted_item)#11740
dat.both=dat.both[rownames(dat.both) %in% df.gene.table$submitted_item,]
i=match(rownames(dat.both),df.gene.table$submitted_item)
sum(df.gene.table[i,]$submitted_item==rownames(dat.both)) #11740
expr.mat=as.matrix(dat.both@assays$RNA@counts)
rownames(expr.mat)=df.gene.table[i,]$validated_id #for ranger to tolerate feature names
sample.meta=dat.both@meta.data
dim(expr.mat) # 11740 gene X 17142cell
dim(sample.meta) #17142cell  4
head(sample.meta)
## filter out low expressed genes: express in 5% cells
i=Matrix::rowSums(expr.mat>0)
input.dat=expr.mat[i>ncol(expr.mat)*0.05,]
features=rownames(input.dat)
dim(input.dat) #6073 17142
input.dat=as.data.frame(t(input.dat))
input.dat[1:3,1:3]
input.dat$sex=sample.meta$sex
input.dat$sex=factor(input.dat$sex)
# create training and validation data
set.seed(123)
valid_split <- initial_split(input.dat, .8)
ames_train <- training(valid_split)
ames_test  <- testing(valid_split)
dim(ames_train) #13713  6074
dim(ames_test) #3429 6074
system.time(
rf_ranger<- ranger(
formula=sex ~ .,
data = ames_train,
num.trees = 1000,
importance = 'impurity',
mtry = floor(length(features) / 3),
probability = TRUE
)
)
5222/60
rf_ranger
rf_ranger$variable.importance %>%
tidy() %>%
dplyr::arrange(desc(x)) %>%
dplyr::top_n(25) %>%
ggplot(aes(reorder(names, x), x)) +
geom_col() +
coord_flip() +
ggtitle("Top 25 important variables")
tmp=rf_ranger$variable.importance %>%
tidy() %>%
dplyr::arrange(desc(x)) %>%
dplyr::top_n(100)
tmp1=df.gene.table[tmp$names,]
head(tmp1)
grep('Sxl|roX|msl',ignore.case = T,tmp1$SYMBOL)
tmp1$SYMBOL[grep('Sxl|roX|msl',ignore.case = T,tmp1$SYMBOL)] #in top100
dim(ames_test) #3429 6074, cell by gene
#pred_ranger = predict(rf_ranger, ames_test)
pred_ranger = predict(rf_ranger, ames_test[,-ncol(ames_test)])
head(pred_ranger$predictions) #probabilities
predict.labels=ifelse(pred_ranger$predictions[,1]>0.5,'embryoFemale','embryoMale')
table(predict.labels,ames_test$sex)
##############################################
## use ranger on all cells
system.time(
rf_ranger<- ranger(
formula=sex ~ .,
data = input.dat,
num.trees = 500,
importance = 'impurity',
mtry = floor(length(features) / 3)
)
)
#   user   system  elapsed
# 7578.153   16.446  402.549
rf_ranger
model=rf_ranger
rf_ranger$prediction.error
# feature importance in random forest
#https://www.statistik.uni-dortmund.de/useR-2008/slides/Strobl+Zeileis.pdf
# Gini importance
model$importance
importance(model,type=2)
top.pick=names( importance(model,type=2)[1:20])
rownames(df.gene.table)=df.gene.table$FBID_KEY
df.gene.table[top.pick,]
# permutation importance
#mean decrease in classification accuracy after permuting Xj over all trees
importance(model,type=1)
top.pick=names( importance(model,type=1)[1:20])
rownames(df.gene.table)=df.gene.table$FBID_KEY
df.gene.table[top.pick,]
##############################################
# training and testing, prediction confidence
# create training and validation data
set.seed(123)
valid_split <- initial_split(input.dat, .8)
ames_train <- training(valid_split)
ames_test  <- testing(valid_split)
dim(ames_train) #13713  6074
dim(ames_test) #3429 6074
system.time(
rf_ranger<- ranger(
formula=sex ~ .,
data = ames_train,
num.trees = 500, #1000 tree, 1.5hr
importance = 'impurity',
mtry = floor(length(features) / 3),
probability = TRUE
)
)
rf_ranger
rf_ranger$variable.importance %>%
tidy() %>%
dplyr::arrange(desc(x)) %>%
dplyr::top_n(25) %>%
ggplot(aes(reorder(names, x), x)) +
geom_col() +
coord_flip() +
ggtitle("Top 25 important variables")
tmp=rf_ranger$variable.importance %>%
tidy() %>%
dplyr::arrange(desc(x)) %>%
dplyr::top_n(100)
tmp1=df.gene.table[tmp$names,]
head(tmp1)
grep('Sxl|roX|msl',ignore.case = T,tmp1$SYMBOL)
tmp1$SYMBOL[grep('Sxl|roX|msl',ignore.case = T,tmp1$SYMBOL)] #in top100
dim(ames_test) #3429 6074, cell by gene
#pred_ranger = predict(rf_ranger, ames_test)
pred_ranger = predict(rf_ranger, ames_test[,-ncol(ames_test)])
head(pred_ranger$predictions) #probabilities
predict.labels=ifelse(pred_ranger$predictions[,1]>0.5,'embryoFemale','embryoMale')
table(predict.labels,ames_test$sex)
#embryoFemale embryoMale
#embryoFemale         2040        131
#embryoMale
tmp=as.data.frame(pred_ranger$predictions)
tmp$pred=predict.labels;
tmp$real=ames_test$sex
tmp$larger.prob=apply(tmp[,c(1,2)],1,max)
head(tmp)
sub.tmp=tmp[tmp$pred!=tmp$real,]
par(mfrow=c(1,2))
hist(sub.tmp$larger.prob)
hist(tmp$larger.prob)
2477、60
2477/60
saveRDS(rf_ranger,file='rf_ranger_500tree_80train.rds')
saveRDS(rf_ranger,file='rf_ranger_500tree_80train.rds')
