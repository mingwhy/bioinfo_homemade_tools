setwd("~/Documents/Jay_data/SVM")
library(ggplot2)
library(gridExtra)
library(Seurat)
dat.both=readRDS('../../single.cell_sex.differences/embryo_sex.cells/integrated.sexed.samples_seurat.obj.rds')
grep("Sxl|msl-2",rownames(dat.both))
gene.names=rownames(dat.both)
########################################################
## read in gene chro info
df.gene.table=data.table::fread('../../single.cell_datasets/embryo_germline/gene.meta_embryo.txt',header=T,sep='\t')
head(df.gene.table)
table(df.gene.table$LOCATION_ARM) #15 Y-chromosome genes
df.gene.table=df.gene.table[df.gene.table$LOCATION_ARM %in% c('2R','3R','3L','4','2L','X','Y'),]
table(df.gene.table$LOCATION_ARM)
df.gene.table=as.data.frame(df.gene.table)
rownames(df.gene.table)=df.gene.table$current_symbol
sum(gene.names %in% df.gene.table$submitted_item) #11740
length(gene.names) #12185
rownames(df.gene.table)=df.gene.table$submitted_item
overlap.genes=gene.names[gene.names %in% df.gene.table$submitted_item]
dat.both=dat.both[overlap.genes,]
dat.both
###########################################################
expr.mat=dat.both@assays$RNA@counts
#change symbol to FBgn
rownames(expr.mat)<-df.gene.table[overlap.genes,]$FBID_KEY
expr.mat[1:3,1:3]
# gene filter
## calculate two set of gene: HVG,
## (binary or continuous) mutual information about sex label
## filter gene: expr in 5% cell
# gene filter
## calculate two set of gene: HVG,
## (binary or continuous) mutual information about sex label
## filter gene: expr in 5% cell
dat.both <- FindVariableFeatures(dat.both, selection.method = "vst", nfeatures = 2000)
features=VariableFeatures(dat.both)
head(features)
expr.mat=expr.mat[features,]
rownames(expr.mat )
###########################################################
expr.mat=dat.both@assays$RNA@counts
expr.mat=expr.mat[features,]
#change symbol to FBgn
dim(expr.mat) #6369 17142
#change symbol to FBgn
dim(expr.mat) #6369 17142
#rownames(expr.mat)<-df.gene.table[overlap.genes,]$FBID_KEY
rownames(expr.mat)<-df.gene.table[rownames(expr.mat),]$FBID_KEY
expr.mat[1:3,1:3]
sex=dat.both$sex
## create data frame for SVM
data = data.frame(t(as.matrix(expr.mat)), y =sex)
head(data)
tail(colnames(data)) #last column is sex label
# create training and valida
library(e1071)
library(caTools)
gene.names=rownames(expr.mat)
length(unique(gene.names))# 6073
dim(data) # 17142  6074 (gene+sex.label.column)
dataset=data
dim(dataset) #17142  6074
colnames(dataset)
start.time=Sys.time();
set.seed(321)
split = sample.split(dataset$y, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
(label.column=ncol(dataset)) #5nd column is the cluster label
# Feature Scaling for train and test separately
training_set[-label.column] = scale(training_set[-label.column])
test_set[-label.column] = scale(test_set[-label.column])
training_set$y=factor(training_set$y)
if(T){
classifier = svm(formula = y ~ .,
data = training_set,
type = 'C-classification',
probability = TRUE,
kernel = 'linear')
#gamma=0.05,kernel = 'radial', cost=10)
y_pred = predict(classifier, newdata = test_set[-label.column])
#y_pred = predict(classifier, newdata = test_set[-label.column],prob=T)
table(test_set[,label.column],y_pred)
#classifier
#saveRDS(classifier,'svm_classifier_2019_train34samples.rds')
saveRDS(classifier,'svm_2021sc_HVG2000_train80samples.rds')
end.time=Sys.time();
print(end.time-start.time)
#Time difference of 1.4 hours, 80%
#Time difference of 2.1 hours, 70%
}
