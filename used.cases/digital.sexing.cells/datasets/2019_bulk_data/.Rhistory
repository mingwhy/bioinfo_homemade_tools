rownames(df.meta)=df.meta$sample.id
df.meta=as.data.frame(df.meta[x,])
dim(df.meta) #24
sum(df.meta[,3]==colnames(log2.RPKM.df.genes)) #24
df.meta.keep=df.meta;
library(factoextra)
res.pca=prcomp(t(log2.RPKM.df.genes),scale=T) #PCA using all filtered genes 8040
head((res.pca$sdev^2)/sum(res.pca$sdev^2))
var.explained=res.pca$sdev^2/sum(res.pca$sdev^2)
var.explained=round(var.explained*100,2)
#df.meta$stage=as.numeric(gsub('Stage: Stage ','',df.meta$stage))
df.meta$stage=gsub('F|M|U|_r2','',df.meta$sample.id)
df.meta$sex=substr(df.meta$sample.id,0,1)
table(df.meta$sex)
df.meta[df.meta$sex=='U',]$sex='F'
table(df.meta$sex)
table(df.meta$stage)
basic_plot <- fviz_pca_ind(res.pca, label="none")
pca.stage=ggplot(cbind(basic_plot$data,df.meta),
aes(x=x,y=y,shape=sex,col=factor(stage)))+geom_point()+theme_bw()+
xlab(paste0('PC1 (',var.explained[1],'%)'))+
ylab(paste0('PC2 (',var.explained[2],'%)'))+
geom_text(aes(label=stage),nudge_x = 2,nudge_y = 2)
expr.genes=rownames(log2.RPKM.df.genes)
##############################################
## sex samples using k-means clustering
df.gene.table=data.table::fread('validate.id_2011_paper_data.txt')
pick.genes1=df.gene.table[grep('Sxl|msl|mof|mle|roX',ignore.case = F,df.gene.table$SYMBOL),]
pick.genes1; #8 genes
#"mle" "msl-3"  "msl-2"   "msl-1" "mof" "lncRNA:roX2" "lncRNA:roX1" 'Sxl'
RPKM[pick.genes1$SYMBOL,]
#markers=pick.genes1$FLYBASE
markers=pick.genes1$query[c(3,6,7,8)]
markers
sum( markers %in% rownames(log2.RPKM)) #4
#sub.df=log2.RPKM[rownames(log2.RPKM) %in% markers,]
sub.df=RPKM[rownames(RPKM) %in% markers,]
dim(sub.df) #4 x 24 samples
df=scale(t(sub.df[,-c(23,24)])) #2sample has NA,sample by feature matrix
head(df)
out=kmeans(df, centers=3, iter.max = 10, nstart = 1)
table(out$cluster)
cluster.out=data.frame(sample.id=names(out$cluster),cluster=out$cluster)
df.tmp=merge(cluster.out,df.meta)
table(df.tmp$cluster,df.tmp$sex,df.tmp$stage)
dim(df.tmp) #22
out$centers
#https://towardsdatascience.com/how-to-use-and-visualize-k-means-clustering-in-r-19264374a53c
fviz_cluster(out,data=df,geom=c('point'))
sub.mat=as.matrix(sub.df)
plot(sub.mat[1,],sub.mat[4,])
library(RColorBrewer)
length(unique(df.meta$stage))
my.col=brewer.pal(8,'Spectral')
colnames(sub.df)=gsub('U','F',colnames(sub.df))
plots=list();iplot=0;
for(i in 1:(nrow(sub.mat)-1)){
for(j in (i+1):nrow(sub.mat)){
df.plot=data.frame(sub.mat[i,],sub.mat[j,],
stage=gsub('F|M|U|_r2','',colnames(sub.df)),
sex=substr(colnames(sub.df),0,1))
gene1=rownames(sub.mat)[i];
gene2=rownames(sub.mat)[j];
colnames(df.plot)=c('gene1','gene2','stage','sex')
iplot=iplot+1
plots[[iplot]]<-ggplot(df.plot,aes(x=gene1,y=gene2,col=stage,shape=sex))+
geom_point(size=2)+
xlab(paste0(gene1,', RPKM'))+ylab(gene2)+
#scale_colour_gradientn(colours = rev(terrain.colors(10)))+
scale_color_manual(values=my.col)+
#geom_text(aes(label=stage),nudge_x = 0,nudge_y = 0.1,size=2)+
theme_classic()
}
}
length(plots)
grid.arrange(grobs=plots,ncol=3)
print(pca.stage)
pdf('4gene.pair.pdf',height=6,width=12)
grid.arrange(grobs=plots,ncol=3)
print(pca.stage)
#pdf('3gene.pair.pdf',height=4,width=12)
#grid.arrange(grobs=plots[c(1,3,5)],ncol=3) #remove roX2
dev.off()
pdf('3gene.pair.pdf',height=4,width=12)
grid.arrange(grobs=plots[c(1,3,5)],ncol=3) #remove roX2
print(pca.stage)
dev.off()
library(ggplot2)
library(gridExtra)
#################################################
## read in meta information
df=read.table('GSE25180_series_matrix.txt',skip=30,sep='\t',fill=TRUE)
head(df)
df=t(df[c(1,40,44),])
df=df[-1,]
df
tmp=basename(df[,2])
tmp=gsub('.bedgraph.gz','',tmp)
id.check=unlist(lapply(strsplit(tmp,'\\_'),'[',1))
sum(id.check==df[,3]) #24 checked
sample.id=gsub('GSM\\d.+?_','',tmp)
sample.id
df=cbind(df[,c(1,3)],sample.id)
colnames(df)=c('sample.info','GSM.id','sample.id')
df.meta=as.data.frame(df);
dim(df.meta) #24 samples
###################################################
## read in STAR output tab-limited read count data
dat=read.table('2011-embryo_normalized.read.count.data.txt',
header=T,fill=T)
dim(dat) #12353    79
dat[1:3,1:9]
colnames(dat)
mat=dat[,-(1:7)]
#We were thus able to partition the overall expression of any mRNA containing w1-CaS differences into its maternal and zygotic component
#7meta+24embryo.sample+24 w1 mother sample+24 Canton-S father sample
x=mat[,c(1,1+24,1+24+24)]
tmp=x[,2]+x[,3]
cbind(x[,1],tmp)
expr.mat=mat[,1:24];
colnames(expr.mat)
sum(colnames(expr.mat) %in% df.meta$sample.id) #24 matched
rownames(expr.mat)=dat[,1]
apply(expr.mat,2,function(i){sum(i,na.rm=T)})
#################################################
## check for chr Y genes
df.gene.table=data.table::fread('validate.id_2011_paper_data.txt')
head(df.gene.table)
table(df.gene.meta$chromosome_name)
# 26 gene on chrY
df.gene.table=df.gene.table[!is.na(df.gene.table$chromosome_name),]
dim(df.gene.table) #12003
y.genes=df.gene.table[df.gene.table$chromosome_name=='Y',]$query
expr.mat[y.genes,]
# both female and male expr Y genes, may due to mapping problem
#################################################
## RPKM
RPKM=expr.mat
log2.RPKM=log(RPKM+1,base=2)
#################################################
## PCA on log2(RPKM)
# remove NA
x=apply(log2.RPKM,1,function(i) sum(is.na(i)))
sum(x==0) #3401 genes
table(x)
log2.RPKM.df=log2.RPKM[x==0,]
dim(log2.RPKM.df) #3401 x 54
log2.RPKM.df[1:3,1:3]
all.genes.var=apply(log2.RPKM.df,1,var)
summary(all.genes.var)
quantile(all.genes.var,0.90)
log2.RPKM.df.genes=log2.RPKM.df[all.genes.var<quantile(all.genes.var,0.90),]
dim(log2.RPKM.df.genes) #3060   54
x=colnames(log2.RPKM.df.genes)
rownames(df.meta)=df.meta$sample.id
df.meta=as.data.frame(df.meta[x,])
dim(df.meta) #24
sum(df.meta[,3]==colnames(log2.RPKM.df.genes)) #24
df.meta.keep=df.meta;
library(factoextra)
res.pca=prcomp(t(log2.RPKM.df.genes),scale=T) #PCA using all filtered genes 8040
head((res.pca$sdev^2)/sum(res.pca$sdev^2))
var.explained=res.pca$sdev^2/sum(res.pca$sdev^2)
var.explained=round(var.explained*100,2)
#df.meta$stage=as.numeric(gsub('Stage: Stage ','',df.meta$stage))
df.meta$stage=gsub('F|M|U|_r2','',df.meta$sample.id)
df.meta$sex=substr(df.meta$sample.id,0,1)
table(df.meta$sex)
df.meta[df.meta$sex=='U',]$sex='F'
table(df.meta$sex)
table(df.meta$stage)
basic_plot <- fviz_pca_ind(res.pca, label="none")
pca.stage=ggplot(cbind(basic_plot$data,df.meta),
aes(x=x,y=y,shape=sex,col=factor(stage)))+
geom_point(size=3)+theme_bw()+
xlab(paste0('PC1 (',var.explained[1],'%)'))+
ylab(paste0('PC2 (',var.explained[2],'%)'))+
geom_text(aes(label=stage),nudge_x = 2,nudge_y = 2)
expr.genes=rownames(log2.RPKM.df.genes)
##############################################
## sex samples using k-means clustering
df.gene.table=data.table::fread('validate.id_2011_paper_data.txt')
pick.genes1=df.gene.table[grep('Sxl|msl|mof|mle|roX',ignore.case = F,df.gene.table$SYMBOL),]
pick.genes1; #8 genes
#"mle" "msl-3"  "msl-2"   "msl-1" "mof" "lncRNA:roX2" "lncRNA:roX1" 'Sxl'
RPKM[pick.genes1$SYMBOL,]
#markers=pick.genes1$FLYBASE
markers=pick.genes1$query[c(3,6,7,8)]
markers
sum( markers %in% rownames(log2.RPKM)) #4
#sub.df=log2.RPKM[rownames(log2.RPKM) %in% markers,]
sub.df=RPKM[rownames(RPKM) %in% markers,]
dim(sub.df) #4 x 24 samples
df=scale(t(sub.df[,-c(23,24)])) #2sample has NA,sample by feature matrix
head(df)
out=kmeans(df, centers=3, iter.max = 10, nstart = 1)
table(out$cluster)
cluster.out=data.frame(sample.id=names(out$cluster),cluster=out$cluster)
df.tmp=merge(cluster.out,df.meta)
table(df.tmp$cluster,df.tmp$sex,df.tmp$stage)
dim(df.tmp) #22
out$centers
#https://towardsdatascience.com/how-to-use-and-visualize-k-means-clustering-in-r-19264374a53c
fviz_cluster(out,data=df,geom=c('point'))
sub.mat=as.matrix(sub.df)
plot(sub.mat[1,],sub.mat[4,])
library(RColorBrewer)
length(unique(df.meta$stage))
my.col=brewer.pal(8,'Spectral')
#my.col=brewer.pal(8,'YlGnBu')
#my.col=brewer.pal(8,'Dark2')
colnames(sub.df)=gsub('U','F',colnames(sub.df))
plots=list();iplot=0;
for(i in 1:(nrow(sub.mat)-1)){
for(j in (i+1):nrow(sub.mat)){
df.plot=data.frame(sub.mat[i,],sub.mat[j,],
stage=gsub('F|M|U|_r2','',colnames(sub.df)),
sex=substr(colnames(sub.df),0,1))
gene1=rownames(sub.mat)[i];
gene2=rownames(sub.mat)[j];
colnames(df.plot)=c('gene1','gene2','stage','sex')
iplot=iplot+1
plots[[iplot]]<-ggplot(df.plot,aes(x=gene1,y=gene2,col=stage,shape=sex))+
geom_point(size=3)+
xlab(paste0(gene1,', RPKM'))+ylab(gene2)+
#scale_colour_gradientn(colours = rev(terrain.colors(10)))+
scale_color_manual(values=my.col)+
#geom_text(aes(label=stage),nudge_x = 0,nudge_y = 0.1,size=2)+
theme_classic()
}
}
length(plots)
grid.arrange(grobs=plots,ncol=3)
#pdf('4gene.pair.pdf',height=6,width=12)
#grid.arrange(grobs=plots,ncol=3)
pdf('3gene.pair.pdf',height=4,width=12)
grid.arrange(grobs=plots[c(1,3,5)],ncol=3) #remove roX2
print(pca.stage)
dev.off()
#https://plotly.com/r/3d-scatter-plots/
library(plotly)
rownames(sub.df)
df.plot=data.frame(sub.mat[1,],sub.mat[2,],sub.mat[4,],
stage=gsub('F|M|U','',colnames(sub.df)),
sex=substr(colnames(sub.df),0,1))
colnames(df.plot)=c('gene1','gene2','gene3','stage','sex')
fig <- plot_ly(df.plot, x = ~gene1, y = ~gene2, z = ~gene3, color = ~sex,
colors = c('#BF382A', '#0C4B8E','grey'))
fig <- fig %>% add_markers()
fig <- fig %>% layout(scene = list(xaxis = list(title = 'msl-2'),
yaxis = list(title = 'roX1'),
zaxis = list(title = 'Sxl')))
fig
setwd("~/Documents/single.cell_sex.differences/external_data/2019_paper_reproduce.result")
library(ggplot2)
library(gridExtra)
#################################################
## read in meta information
df.meta=data.table::fread('sample.meta_sex.label.txt');# from 02_calTPM_PCA.R
###################################################
## read in STAR output tab-limited read count data
files=Sys.glob('GSE127176_RAW/*tab')
files
raw.expr=list();
for(file in files){
gsm=strsplit(basename(file),'_')[[1]][1]
x=read.table(file,skip=4)
raw.expr[[gsm]]=x
}
length(raw.expr) #54
# extract 'expressed genes', defined by >=21 counts in >=5 embryos
per.embryo.gene=lapply(raw.expr,function(x){
x[x[,2]>=21,1]
})
sapply(per.embryo.gene,length)
expr.genes=names(which(table(unlist(per.embryo.gene))>=5))
length(expr.genes) #8983 genes
filtered.expr=lapply(raw.expr,function(x){
x[x[,1] %in% expr.genes,]
})
sapply(filtered.expr,nrow) #8983 genes
#################################################
## TPM: read.count/gene.length
## then divided/ sum(length.corrented.count) x 10^6
df.info=data.table::fread('dme7_geneLength_chr.txt')
#query.genes=scan('all.gene.names.txt',what='')
query.genes=expr.genes
head(query.genes)
length(query.genes) #8983
sum(df.info$GENEID %in% query.genes) #8934
tmp=merge(filtered.expr[[1]],df.info,by.x='V1',by.y='GENEID')
length.corrected.counts=lapply(filtered.expr,function(x){
tmp=merge(x,df.info,by.x='V1',by.y='GENEID')
tmp$V2/tmp$exonic.gene.sizes/1000 #in kilobase
})
sapply(length.corrected.counts,length)
TPM=lapply(length.corrected.counts,function(x){
x/sum(x)*10^6
})
log2.TPM=lapply(TPM,function(i) log(i+1,base=2))
## remove 5 PB samples
library(multiclassPairs)
log2TPM.df=Reduce(`cbind`,log2.TPM)
dim(log2TPM.df) #8934 x 54
rownames(log2TPM.df)=tmp[,1]
colnames(log2TPM.df)=names(log2.TPM)
log2TPM.df[1:3,1:3]
sum(df.meta$GSM.id==colnames(log2TPM.df)) #54
expr.mat=log2TPM.df[,df.meta$cluster!='PB']
sample.meta=df.meta[df.meta$cluster!='PB',]
sum(sample.meta$GSM.id==colnames(expr.mat)) #34
## change FBgn to gene symbol
gene.id=data.table::fread('validate.id_2019_paper_data.txt')
fbgn=rownames(expr.mat)
x=gene.id[match(fbgn,gene.id$FLYBASE),]
sum(x$FLYBASE==fbgn) #8934
dim(expr.mat)
rownames(expr.mat)=x$SYMBOL
expr.mat[1:3,1:3]
# due to gene name with '-' are not allowed in `multiclassPairs`
rownames(expr.mat)=gsub('-','_',rownames(expr.mat))
##########################################################################
## https://github.com/NourMarzouka/multiclassPairs/blob/master/README.md
library(multiclassPairs)
# split the data
# 60% as training data and 40% as testing data
n <- ncol(expr.mat)
set.seed(1234)
training_samples <- sample(1:n,size = n*0.6)
table(sample.meta[training_samples,]$cluster)
table(sample.meta[-training_samples,]$cluster)
train <- expr.mat[,training_samples]
test  <- expr.mat[,-training_samples]
train.meta <- sample.meta[training_samples,]
test.meta <- sample.meta[-training_samples,]
# create data object
object <- ReadData(#Data = expr.mat,
Data = train,
Labels = train.meta$cluster,
verbose = FALSE)
object
filtered_genes <- filter_genes_TSP(data_object = object,
filter = "one_vs_one",
platform_wise = FALSE,
featureNo = 1000,
UpDown = TRUE,
verbose = TRUE)
filtered_genes
# Let's train our model
classifier <- train_one_vs_rest_TSP(data_object = object,
filtered_genes = filtered_genes,
k_range = 2:500,
include_pivot = FALSE,
one_vs_one_scores = TRUE,
platform_wise_scores = FALSE,
seed = 1234,
verbose = FALSE)
classifier
classifier$classifiers$female
classifier$classifiers$male
# apply on the training data
# To have the classes in output in specific order, we can use classes argument
results_train <- predict_one_vs_rest_TSP(classifier = classifier,
Data = object,
tolerate_missed_genes = TRUE,
weighted_votes = TRUE,
classes = c("female",'male'),
verbose = TRUE)
# apply on the testing data
results_test <- predict_one_vs_rest_TSP(classifier = classifier,
Data = test,
tolerate_missed_genes = TRUE,
weighted_votes = TRUE,
classes = c("female",'male'),
verbose = TRUE)
# get a look over the scores in the testing data
knitr::kable(head(results_train))
table(results_train$max_score)
knitr::kable(head(results_test))
table(results_test$max_score)
# Confusion Matrix and Statistics on training data
caret::confusionMatrix(data = factor(results_train$max_score,
levels = unique(object$data$Labels)),
reference = factor(object$data$Labels,
levels = unique(object$data$Labels)),
mode="everything")
# Confusion Matrix and Statistics on testing data
caret::confusionMatrix(data = factor(results_test$max_score,
levels = unique(object$data$Labels)),
reference = factor(test.meta$cluster,
levels = unique(object$data$Labels)),
mode="everything")
# Visualiation
# plot for the rules and scores in the training data
pdf("TSP_out.pdf")
plot_binary_TSP(Data = object, # we are using the data object here
classifier = classifier,
prediction = results_train,
classes =  c("female",'male'),
margin = c(0,5,0,10),
title = "Training data")
# plot for the rules and scores in the testing data
plot_binary_TSP(Data = test, # ExpressionSet
ref = test.meta$cluster,
classifier = classifier,
prediction = results_test,
classes =  c("female",'male'),
title = "Testing data",
margin = c(0,5,0,10))
dev.off()
getwd()
library(ggplot2)
library(gridExtra)
#################################################
## read in meta information
df=read.table('GSE127176_series_matrix.txt',skip=30,sep='\t',fill=TRUE)
head(df)
df=t(df[c(1,10,39),])
df=df[-1,]
colnames(df)=c('sample.id','stage','GSM.id')
df.meta=df;
dim(df.meta) #54 samples
###################################################
## read in STAR output tab-limited read count data
files=Sys.glob('GSE127176_RAW/*tab')
files
raw.expr=list();
for(file in files){
gsm=strsplit(basename(file),'_')[[1]][1]
x=read.table(file,skip=4)
raw.expr[[gsm]]=x
}
length(raw.expr) #54
# extract 'expressed genes', defined by >=21 counts in >=5 embryos
per.embryo.gene=lapply(raw.expr,function(x){
x[x[,2]>=21,1]
})
sapply(per.embryo.gene,length)
expr.genes=names(which(table(unlist(per.embryo.gene))>=5))
length(expr.genes) #8983 genes
filtered.expr=lapply(raw.expr,function(x){
x[x[,1] %in% expr.genes,]
})
sapply(filtered.expr,nrow) #8983 genes
#################################################
## TPM: read.count/gene.length
## then divided/ sum(length.corrented.count) x 10^6
df.info=data.table::fread('dmel_geneLength_chr.txt')
#query.genes=scan('all.gene.names.txt',what='')
query.genes=expr.genes
head(query.genes)
length(query.genes) #8983
sum(df.info$GENEID %in% query.genes) #8934
tmp=merge(filtered.expr[[1]],df.info,by.x='V1',by.y='GENEID')
length.corrected.counts=lapply(filtered.expr,function(x){
tmp=merge(x,df.info,by.x='V1',by.y='GENEID')
tmp$V2/tmp$exonic.gene.sizes/1000 #in kilobase
})
sapply(length.corrected.counts,length)
TPM=lapply(length.corrected.counts,function(x){
x/sum(x)*10^6
})
log2.TPM=lapply(TPM,function(i) log(i+1,base=2))
#################################################
## PCA on log2(TPM)
log2TPM.df=Reduce(`cbind`,log2.TPM)
dim(log2TPM.df) #8934 x 54
rownames(log2TPM.df)=tmp[,1]
colnames(log2TPM.df)=names(log2.TPM)
log2TPM.df[1:3,1:3]
# remove genes with var larger than 90% quantile
all.genes.var=apply(log2TPM.df,1,var)
quantile(all.genes.var,0.90)
log2TPM.df.genes=log2TPM.df[all.genes.var<quantile(all.genes.var,0.90),]
dim(log2TPM.df.genes) #8040   54
x=colnames(log2TPM.df.genes)
rownames(df.meta)=df.meta[,3]
df.meta=as.data.frame(df.meta[x,])
sum(df.meta[,3]==colnames(log2TPM.df.genes)) #54
df.meta.keep=df.meta;
library(factoextra)
res.pca=prcomp(t(log2TPM.df.genes),scale=T) #PCA using all filtered genes 8040
head((res.pca$sdev^2)/sum(res.pca$sdev^2))
var.explained=res.pca$sdev^2/sum(res.pca$sdev^2)
var.explained=round(var.explained*100,2)
df.meta$stage=as.numeric(gsub('Stage: Stage ','',df.meta$stage))
basic_plot <- fviz_pca_ind(res.pca, label="none")
ggplot(cbind(basic_plot$data,df.meta),
aes(x=x,y=y,col=factor(stage)))+geom_point(shape=19)+theme_bw()+
xlab(paste0('PC1 (',var.explained[1],'%)'))+
ylab(paste0('PC2 (',var.explained[2],'%)'))
##############################################
## sex samples using k-means clustering
df.gene.table=data.table::fread('validate.id_2019_paper_data.txt')
pick.genes1=df.gene.table[grep('sxl|msl|mof|mle|roX',ignore.case = T,df.gene.table$SYMBOL),]
pick.genes1; #8 genes
# only use Sxl, msl-2, roX1, rox2
#markers=c('FBgn0264270','FBgn0005616','FBgn0019661','FBgn0019660')
markers=c('FBgn0264270','FBgn0005616','FBgn0019661')
sum( markers %in% expr.genes) #4
sub.df=log2TPM.df[rownames(log2TPM.df) %in% markers,]
dim(sub.df) #4 x 54 samples
df.meta=data.table::fread('sample.meta_sex.label.txt')
table(df.meta$cluster)
## svm
library(e1071)
rownames(sub.df)
dim(sub.df) #4 gene, 54 sample
sub.df=log2TPM.df
rownames(sub.df)
dim(sub.df) #4 gene, 54 sample
getwd()
