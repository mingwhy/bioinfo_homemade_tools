mat[1:10,1:2]
dim(fdata)
dim(mat)
dim(pdata)
head(fdata)
pdata[1:10,1:2]
pdata[1:2,]
# create a new CDS object
pd <- new("AnnotatedDataFrame", data = pdata)
fd <- new("AnnotatedDataFrame", data = fdata)
pbmc_cds <- newCellDataSet(as(mat, "dgCMatrix"),
phenoData = pd,
featureData = fd)
library(monocle3)
# load in the data
# NOTE: the 'system.file' file name is only necessary to read in
# included package data
#
mat <- Matrix::readMM(system.file("extdata", "exprs_sparse.mtx", package = "garnett"))
fdata <- read.table(system.file("extdata", "fdata.txt", package = "garnett"))
pdata <- read.table(system.file("extdata", "pdata.txt", package = "garnett"),
sep="\t")
row.names(mat) <- row.names(fdata)
colnames(mat) <- row.names(pdata)
# create a new CDS object
pd <- new("AnnotatedDataFrame", data = pdata)
fd <- new("AnnotatedDataFrame", data = fdata)
pbmc_cds <- newCellDataSet(as(mat, "dgCMatrix"),
phenoData = pd,
featureData = fd)
library(monocle)
# load in the data
# NOTE: the 'system.file' file name is only necessary to read in
# included package data
#
mat <- Matrix::readMM(system.file("extdata", "exprs_sparse.mtx", package = "garnett"))
fdata <- read.table(system.file("extdata", "fdata.txt", package = "garnett"))
pdata <- read.table(system.file("extdata", "pdata.txt", package = "garnett"),
sep="\t")
row.names(mat) <- row.names(fdata)
colnames(mat) <- row.names(pdata)
# create a new CDS object
pd <- new("AnnotatedDataFrame", data = pdata)
fd <- new("AnnotatedDataFrame", data = fdata)
pbmc_cds <- newCellDataSet(as(mat, "dgCMatrix"),
phenoData = pd,
featureData = fd)
library(org.Hs.eg.db)
library(reticulate)
py_config()
cds<-readRDS("tmp_cds.RDS");
cds <- cluster_cells(cds, resolution=1e-5)
conda_install(envname = "r-reticulate", packages="louvain")
conda_install(envname = "r-reticulate", packages="louvain")
py_config()
library(reticulate)
py_config()
conda_install(envname = "r-reticulate", packages="louvain")
library(reticulate)
py_config()
library(reticulate)
use_condaenv("py37")
py_config()
import("numpy")
import("umap")
use_condaenv("py37")
library(reticulate)
py_config()
cds <- cluster_cells(cds, resolution=1e-5)
conda_install(envname = "r-reticulate", packages="louvain")
conda_list()
py_config()
use_condaenv(condaenv = 'py37', required = TRUE)
py_install("louvain")
cds <- cluster_cells(cds, resolution=1e-5)
cds<-readRDS("tmp_cds.RDS");
conda_install(envname = "r-reticulate", packages="louvain")
cds <- cluster_cells(cds, resolution=1e-5)
py_config();
py_install("louvain");#https://rstudio.github.io/reticulate/articles/python_packages.html
library(reticulate)
py_config();
reticulate::py_install(packages ='louvain')
cds<-readRDS("tmp_cds.RDS");
#conda_install(envname = "r-reticulate", packages="louvain")
cds <- cluster_cells(cds, resolution=1e-5)
py_config();
reticulate::py_install(packages ='louvain')
#conda_install(envname = "r-reticulate", packages="louvain")
cds <- cluster_cells(cds, resolution=1e-5)
py_install("numpy")
py_install("umap")
library(reticulate)
py_config();
paste("/anaconda3/envs/r-reticulate/bin",Sys.getenv("PATH"), sep=":"))
paste("/anaconda3/envs/r-reticulate/bin",Sys.getenv("PATH"), sep=":")
library(reticulate)
py_config();
use_condaenv("r-reticulate")
py_config();
py_install("louvain");#https://rstudio.github.io/reticulate/articles/python_packages.html
py_install("numpy")
py_install("umap")
cds<-readRDS("tmp_cds.RDS");
#conda_install(envname = "r-reticulate", packages="louvain")
cds <- cluster_cells(cds, resolution=1e-5)
py_config();
library(reticulate)
#use_condaenv("r-reticulate")
py_config();
#use_condaenv("r-reticulate")
py_config();
library(reticulate)
#use_condaenv("r-reticulate")
py_config();
import(numpy)
library(reticulate)
#use_condaenv("r-reticulate")
py_config();
py_install("louvain");#https://rstudio.github.io/reticulate/articles/python_packages.html
#use_condaenv("r-reticulate")
py_config();
cds<-readRDS("tmp_cds.RDS");
#conda_install(envname = "r-reticulate", packages="louvain")
cds <- cluster_cells(cds, resolution=1e-5)
#conda_install(envname = "r-reticulate", packages="louvain")
conda_install(packages="louvain")
library(reticulate)
#use_condaenv("r-reticulate")
py_config();
cds<-readRDS("tmp_cds.RDS");
cds <- cluster_cells(cds, resolution=1e-5)
conda_install(envname = "r-reticulate", packages="louvain")
cds <- cluster_cells(cds, resolution=1e-5)
library(reticulate)
#use_condaenv("r-reticulate")
py_config();
cds<-readRDS("tmp_cds.RDS");
cds <- cluster_cells(cds, resolution=1e-5)
use_condaenv("r-reticulate")
conda_install(envname = "r-reticulate", packages="louvain")
cds <- cluster_cells(cds, resolution=1e-5)
py_config();
py_discover_config()
library(reticulate)
py_config();
library(reticulate)
py_config();
library(reticulate)
py_config();
config <- py_config()
config$numpy
np <- reticulate::import("numpy")
reticulate::use_python("/anaconda3/envs/r-reticulate/bin/python", required = TRUE))
reticulate::use_python("/anaconda3/envs/r-reticulate/bin/python", required = TRUE)
py_config();
library(reticulate)
py_config();
reticulate::use_python("/anaconda3/envs/r-reticulate/bin/python", required = TRUE)
library(reticulate)
py_config();
reticulate::use_python("/anaconda3/envs/r-reticulate/bin/python", required = TRUE)
library(reticulate)
py_config();
py_install("louvain");#https://rstudio.github.io/reticulate/articles/python_packages.html
py_install("numpy")
py_install("umap")
use_condaenv("r-reticulate")
py_install("louvain");#https://rstudio.github.io/reticulate/articles/python_packages.html
conda_create("r-reticulate")
conda_install(envname = "r-reticulate", packages="louvain")
conda_install(envname = "r-reticulate", packages="numpy")
conda_install(envname = "r-reticulate", packages="umap")
py_config();
use_condaenv("r-reticulate")
py_config();
import("numpy")
use_condaenv("r-reticulate")
import("numpy")
library(reticulate)
py_config();
use_condaenv("r-reticulate")
cds<-readRDS("tmp_cds.RDS");
cds <- cluster_cells(cds, resolution=1e-5)
py_install("louvain");#https://rstudio.github.io/reticulate/articles/python_packages.html
py_install("numpy")
py_install("umap")
conda_install(envname = "r-reticulate", packages="louvain")
conda_install(envname = "r-reticulate", packages="numpy")
conda_install(envname = "r-reticulate", packages="umap")
cds <- cluster_cells(cds, resolution=1e-5)
#install.packages("ape")
#install.packages("phangorn")
#install.packages("phytools")
#install.packages("geiger")
#install.packages("gplots")
library(gplots);library("ape");library("phangorn");library("phytools");library("geiger");library(ggplot2)
h <- function(x) {y <- x[x > 0]; -sum(y * log(y,base=2))}
jsd <- function(p,q) {(h(q %*% p) - q %*% apply(p, 1, h))^0.5} #square.root of JSD
h <- function(x) {y <- x[x > 0]; -sum(y * log(y,base=2))}
jsd <- function(p,q) {(h(q %*% p) - q %*% apply(p, 1, h))^0.5} #square.root of JSD
q=c(0.1,0.2,0.5,0.8,0.01)
p=c(0.3,0.1,0.1,0.6,0.02)
p=p/sum(p)
q=q/sum(q)
p
q
sum(p)
sum(q)
q
p
p%*%q
p
q
q %*% p
p
apply(p, 1, h)
p
q=as.data.frame(q)
p=as.data.frame(p)
q
p
q %*% p
p %*% q
p
q
https://charlesliuyx.github.io/2017/09/11/什么是信息熵、交叉熵和相对熵/
p=c(0.3,0.1,0.1,0.6,0.02)
q=c(0.1,0.2,0.5,0.8,0.01)
p
q
x=rbind(p,q)
x->p
q=c(0.5,0.5)
p
q
q %*% p
h(q %*% p)
apply(p, 1, h)
q %*% apply(p, 1, h)
h(q %*% p) - q %*% apply(p, 1, h)
q
apply(p, 1, h)
category <- c(1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0)
category
table(category)
prediction <- rev(seq_along(category))
predict()
prediction
prediction[9:10] <- mean(prediction[9:10])
prediction
library(pROC)
roc_obj <- roc(category, prediction)
auc(roc_obj)
roc_objh
roc_obj
roc_ob j
roc_obj
auc(roc_obj)
roc_df <- data.frame(
TPR=rev(roc_obj$sensitivities),
FPR=rev(1 - roc_obj$specificities),
labels=roc_obj$response,
scores=roc_obj$predictor)
roc_df
head(roc_df)
roc_obj$response
roc_obj$predictor
rectangle <- function(x, y, width, height, density=12, angle=-45, ...)
polygon(c(x,x,x+width,x+width), c(y,y+height,y+height,y),
density=density, angle=angle, ...)
roc_df <- transform(roc_df,
dFPR = c(diff(FPR), 0),
dTPR = c(diff(TPR), 0))
roc_df
head(roc_df)
plot(0:10/10, 0:10/10, type='n', xlab="FPR", ylab="TPR")
abline(h=0:10/10, col="lightblue")
abline(v=0:10/10, col="lightblue")
with(roc_df, {
mapply(rectangle, x=FPR, y=0,
width=dFPR, height=TPR, col="green", lwd=2)
mapply(rectangle, x=FPR, y=TPR,
width=dFPR, height=dTPR, col="blue", lwd=2)
lines(FPR, TPR, type='b', lwd=3, col="red")
})
x=c(0,1,1,1,0,0,0,0,0,1,0,0)
length(x)
y=scan()
boxplot(rbind(x,y))
x
x=factor(x)
x
boxplot(x,y)
x
y
cbind(x,y)->df
df
head(df)
stripchart(x!y)
stripchart(x~y)
boxplot(x~y)
boxplot(y~x)
stripchart(y~x)
library(ROCR)
head(df)
colnames(df)<-c("HCC","Biomarker_value")
df
head(df)
pred <- prediction(df$Biomarker_value, df$HCC )
perf <- performance(pred,"tpr","fpr")
library(ROCR)
pred <- prediction(df$Biomarker_value, df$HCC )
perf <- performance(pred,"tpr","fpr")
plot(perf,col="black")
abline(a=0, b=1, col="#8AB63F")
df
df=as.data.frame(df)
library(ROCR)
pred <- prediction(df$Biomarker_value, df$HCC )
perf <- performance(pred,"tpr","fpr")
plot(perf,col="black")
abline(a=0, b=1, col="#8AB63F")
auc<- performance( pred,  c("auc"))
unlist(slot(auc , "y.values"))
y
rm(list=ls())
x=c(0,1,1,1,0,0,0,0,0,1,0,0)
y=c(1.063,1.132,1.122,1.058,0.988,1.182,1.037,1.052,0.925,1.232,0.911,0.967);
df=data.frame('HCC'=x,'Biomarker_value'=y)
df
str(df)
boxplot(df$HCC~df$Biomarker_value)
boxplot(df$HCC~df$Biomarker_value)
boxplot(df$Biomarker_value~df$HCC)
stripchart(df$Biomarker_value~df$HCC)
x=c(0,1,1,1,0,0,0,0,0,1,0,0)
y=c(1.063,1.132,1.122,1.058,0.988,1.182,1.037,1.052,0.925,1.232,0.911,0.967);
df=data.frame('HCC'=x,'Biomarker_value'=y)
boxplot(df$HCC~df$Biomarker_value)
boxplot(df$Biomarker_value~df$HCC)
stripchart(df$Biomarker_value~df$HCC,vertical=T,method='jitter',add=T)
library(ROCR)
x=c(0,1,1,1,0,0,0,0,0,1,0,0)
y=c(1.063,1.132,1.122,1.058,0.988,1.182,1.037,1.052,0.925,1.232,0.911,0.967);
df=data.frame('HCC'=x,'Biomarker_value'=y)
boxplot(df$HCC~df$Biomarker_value)
boxplot(df$Biomarker_value~df$HCC)
stripchart(df$Biomarker_value~df$HCC,vertical=T,method='jitter',add=T)
library(ROCR)
pred <- prediction(df$Biomarker_value, df$HCC )
perf <- performance(pred,"tpr","fpr")
plot(perf,col="black")
abline(a=0, b=1, col="#8AB63F")
auc<- performance( pred,  c("auc"))
unlist(slot(auc , "y.values"))
wt <-wilcox.test(data=df, df$Biomarker_value ~ df$HCC)
1 - wt$statistic/(sum(df$HCC==1)*sum(df$HCC==0))
wt$statistic
wt <-wilcox.test(data=df, df$Biomarker_value ~ df$HCC)
wt$p.value
HCC <- rbinom (n=12, size=1, prob=0.27)
HCC
Biomarker_value <- rnorm (12,mean=1,sd=0.1) + HCC*0
# replacing the zero by a value would make the test informative
df<-data.frame (HCC, Biomarker_value)
library(knitr)
kable(head(df))
category <- c(1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0)
prediction <- rev(seq_along(category))
prediction[9:10] <- mean(prediction[9:10])
category
prediction
library('pROC')
(official_auc <- auc(roc(category, prediction)))
official_auc
auc_wmw <- function(labels, scores){
labels <- as.logical(labels)
pos <- scores[labels]
neg <- scores[!labels]
U <- as.numeric(wilcox.test(pos, neg)$statistic)
U/(length(pos) * length(neg))
}
auc_wmw(category, prediction)
labels <- as.logical(labels)
auc_wmw2 <- function(labels, scores){
labels <- as.logical(labels)
n1 <- sum(labels)
n2 <- sum(!labels)
R1 <- sum(rank(scores)[labels])
U1 <- R1 - n1 * (n1 + 1)/2
U1/(n1 * n2)
}
auc_wmw2(category, prediction)
rank(c(3,5,1,2))
order(c(3,5,1,2))
category
prediction
library(tensorflow)
install_tensorflow(extra_packages = "tensorflow-probability")
tensorflow::tf_config()
tensorflow::install_tensorflow(extra_packages='tensorflow-probability')
?install_tensorflow
tensorflow::install_tensorflow(extra_packages='tensorflow-probability',method='auto')
tensorflow::install_tensorflow(extra_packages='tensorflow-probability',method='conda')
tensorflow::tf_config()
install.packages("devtools") # If not already installed
devtools::install_github("Irrationone/cellassign")
sess = tf$Session()
tensorflow::tf_config()
tf$Session
library(cellassign)
devtools::install_github("rstudio/tensorflow")
library(tensorflow)
install_tensorflow()
library(tensorflow)
install_tensorflow(method="conda")
library(ape)
library(phangorn)
plotBS
?plotBS
## Not run:
data(Laurasiatherian)
dm <- dist.logDet(Laurasiatherian)
tree <- NJ(dm)
# NJ
set.seed(123)
NJtrees <- bootstrap.phyDat(Laurasiatherian,
FUN=function(x)NJ(dist.logDet(x)), bs=100)
treeNJ <- plotBS(tree, NJtrees, "phylogram")
# Maximum likelihood
fit <- pml(tree, Laurasiatherian)
fit <- optim.pml(fit, rearrangement="NNI")
set.seed(123)
bs <- bootstrap.pml(fit, bs=100, optNni=TRUE)
treeBS <- plotBS(fit$tree,bs)
# Maximum parsimony
treeMP <- pratchet(Laurasiatherian)
treeMP <- acctran(treeMP, Laurasiatherian)
set.seed(123)
BStrees <- bootstrap.phyDat(Laurasiatherian, pratchet, bs = 100)
treeMP <- plotBS(treeMP, BStrees, "phylogram")
add.scale.bar()
# export tree with bootstrap values as node labels
# write.tree(treeBS)
## End(Not run)
library(scran)
setwd("~/Downloads/eye-size-measure/6figs-for-test")
library("EBImage")
BiocManager::install("EBImage")
library(EBImage)
setwd("~/Downloads/eye-size-measure/6figs-for-test")
img=readImage("fig101.jpg")
display(img)
file.info(img)
filename='fig101.jpg'
file.info(filename)$size
str(img)
dim(img)
imageData(img)
dim(img)
as.array(img)
is.Image(as.array(img))
hist(img)
range(img)
img
numberOfFrames(img)
colorMode(img)<-Grayscale
display(img,all=T)
img_neg = max(img) - img
display( img_neg )
img_thresh = img > .5
display(img_thresh)
img_thresh = img > .6
img_thresh = img > .9
display(img_thresh)
img_thresh = img > .3
display(img_thresh)
img_thresh = img > .5
display(img_thresh)
img_thresh
fhi = matrix(1, nrow = 3, ncol = 3)
fhi[2, 2] = -8
img_fhi = filter2(img, fhi)
display(img_fhi)
l = length(img)
n = l/10
pixels = sample(l, n)
img_noisy = img
img_noisy[pixels] = runif(n, min=0, max=1)
display(img_noisy)
threshold = otsu(nuc)
threshold = otsu(img)
threshold
nuc_th = combine( mapply(function(frame, th) frame > th,
getFrames(img), threshold, SIMPLIFY=FALSE) )
display(nuc_th, all=TRUE)
disc = makeBrush(31, "disc")
disc = disc / sum(disc)
offset = 0.05
nuc_bg = filter2( img, disc )
nuc_th = nuc > nuc_bg + offset
display(nuc_th, all=TRUE)
display( thresh(img, w=15, h=15, offset=0.05), all=TRUE )
nmask = thresh(img, w=10, h=10, offset=0.05)
nmask = opening(nmask, makeBrush(5, shape='disc'))
nmask = fillHull(nmask)
nmask = bwlabel(nmask)
display(nmask, all=TRUE)
ctmask = opening(cel>0.1, makeBrush(5, shape='disc'))
cmask = propagate(cel, seeds=nmask, mask=ctmask)
display(ctmask, all=TRUE)
